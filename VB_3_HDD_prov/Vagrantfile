Vagrant.configure("2") do |config|
  
  config.vm.box = "hashicorp/bionic64"

  config.vm.hostname = "dst-linux-disk-prov"
  
  config.vm.boot_timeout = 600

  config.vm.provider "virtualbox" do |vb|
    vb.name = "dst-linux-disk-prov"
    vb.gui = false
    vb.memory = 8024
    vb.cpus = 4

    disk2name = "extra_disk2"
    disk3name = "extra_disk3"

    # Helper: create a disk file if it doesn't exist
    def create_disk(name, size_mb)
      disk_path = File.join(File.dirname(__FILE__), "#{name}.vdi")
      unless File.exist?(disk_path)
        puts "==> Creating additional disk at #{disk_path}"
        system("VBoxManage createhd --filename \"#{disk_path}\" --size #{size_mb} --format VDI")
      else
        puts "==> Disk #{disk_path} already exists. Skipping creation."
      end

      disk_path
    end

    
    disk_path1 = create_disk(disk2name, 1024)   # 1 GiB
    disk_path2 = create_disk(disk3name, 1024)

    puts "==> disk_path1 #{disk_path1}"
    puts "==> disk_path2 #{disk_path2}"

    # Create disk 2 only if not present
    # disk_path1 = File.join(File.dirname(__FILE__), "extra_disk1.vdi")
    # unless File.exist?(disk_path1)
    #   puts "==> Creating additional disk at #{disk_path1}"
    #   system("VBoxManage createhd --filename \"#{disk_path1}\" --size 1024 --format VDI")
    # end

    # # Create disk 2 only if not present
    # disk_path2 = File.join(File.dirname(__FILE__), "extra_disk2.vdi")
    # unless File.exist?(disk_path2)
    #   puts "==> Creating additional disk at #{disk_path2}"
    #   system("VBoxManage createhd --filename \"#{disk_path2}\" --size 1024 --format VDI")
    # end

    # # Use 'post-boot' style customizations so controller exists
    # vb.customize ["storagectl", :id,
    #               "--name", "SATA Controller",
    #               "--add", "sata",
    #               "--controller", "IntelAhci"]

    vb.customize ["storageattach", :id,
                  "--storagectl", "SATA Controller",
                  "--port", 1,
                  "--device", 0,
                  "--type", "hdd",
                  "--medium", disk_path1]

    vb.customize ["storageattach", :id,
              "--storagectl", "SATA Controller",
              "--port", 2,
              "--device", 0,
              "--type", "hdd",
              "--medium", disk_path2]
  end

  # ------------------------------------------------------------------
  # 3️⃣  Provisioner – run after the VM boots
  # ------------------------------------------------------------------
  config.vm.provision "shell", privileged: true, run: "always" do |s|
    s.inline = <<-SHELL
      set -euo pipefail

      # 3a. Make sure we have the LVM tools
      if dpkg -s lvm2 &>/dev/null; then
          echo "lvm2 is installed"
      else
          echo "lvm2 is NOT installed"
          echo "Installing lvm2..."
          apt-get update
          apt-get install -y lvm2
      fi

      # 3b. Wait a bit for the kernel to notice the new disks
      echo "Waiting for /dev/sdb and /dev/sdc to appear..."
      while [ ! -b /dev/sdb ] || [ ! -b /dev/sdc ]; do
        sleep 1
      done

      # 3c. Create a single partition on each disk (primary, bootable flag not needed)
      for dev_name in "sdb" "sdc"; do
        dev="/dev/${dev_name}"

        echo "Creating partition on $dev..."
        DISK=$dev

        # 1. Make sure we see the disk

        # Grab the values
        read -r NAME SIZE TYPE MOUNTPOINT < <(
            lsblk -n -o NAME,SIZE,TYPE,MOUNTPOINT "$dev"
        )

        # Expected values
        EXPECTED_NAME=$dev_name
        EXPECTED_SIZE="1G"

        # Validate
        if [[ "$NAME" != "$EXPECTED_NAME" || "$SIZE" != "$EXPECTED_SIZE" ]]; then
            echo "ERROR: Device check failed." >&2
            echo "  Expected: name=$EXPECTED_NAME, size=$EXPECTED_SIZE" >&2
            echo "  Found:    name=$NAME, size=$SIZE" >&2
            exit 1          # stops the script immediately
        fi

        apt-get update
        apt-get install -y gdisk
        
        part_size = "300M"

        # 2. Create an msdos partition table
        sgdisk --zap-all $DISK
        # sgdisk --mbrtogpt $DISK   # optional if you prefer GPT; remove if you want msdos
        # OR: parted -s $DISK mklabel msdos

        # 3. Create two 300 MiB primary partitions
        sgdisk --new=1:0:+$part_size --typecode=1:8300 $DISK
        sgdisk --new=2:0:+$part_size --typecode=2:8300 $DISK

        # 4. (Optional) Mark them as bootable
        # sgdisk --attributes=1:set:2 $DISK
        # sgdisk --attributes=2:set:2 $DISK

        # 5. Re‑read the partition table
        partprobe $DISK || partx -a $DISK

        # 6. Format the partitions
        mkfs.ext4 -F ${DISK}1
        mkfs.ext4 -F ${DISK}2

        # Mounting partitions before creating PVs	pvcreate will fail if the partition is mounted.	Unmount them first, or skip partitioning entirely.
        # 7. Mount them
        # mkdir -p /mnt/part1 /mnt/part2
        # mount ${DISK}1 /mnt/part1
        # mount ${DISK}2 /mnt/part2

        # 8. Persist mounts
        # bash -c "cat >>/etc/fstab <<EOF
        # ${DISK}1 /mnt/part1 ext4 defaults 0 2
        # ${DISK}2 /mnt/part2 ext4 defaults 0 2
        # EOF"
        # Make the kernel re-read the partition table
        # partprobe "$dev"
      done

      
      # 3e. Create LVM physical volumes
      echo "Creating LVM PVs..."
      pvcreate -ff -y /dev/sdb1 /dev/sdb2 /dev/sdc1 /dev/sdc2

      # 3f. Create a volume group named 'vgdata'
      echo "Creating volume group 'vgdata'..."
      vgcreate vgdata /dev/sdb1 /dev/sdb2 /dev/sdc1 /dev/sdc2

      # 3g. Create a logical volume – e.g. 1G
      echo "Creating logical volume 'lvdata' (1G)..."
      lvcreate -L 1G -n lvdata vgdata

      # 3h. Format the LV with ext4
      echo "Formatting /dev/vgdata/lvdata..."
      mkfs.ext4 -F /dev/vgdata/lvdata

      # 3i. (Optional) Mount the LV and add to /etc/fstab
      mount_point="/mnt/lvdata"
      mkdir -p "$mount_point"
      mount /dev/vgdata/lvdata "$mount_point"

      echo "Adding to /etc/fstab for persistence..."
      echo "/dev/vgdata/lvdata $mount_point ext4 defaults 0 0" >> /etc/fstab

      echo "All done – disks are partitioned, formatted, and LVM is ready!"
    SHELL
  end
end
